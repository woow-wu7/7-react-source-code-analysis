{"version":3,"file":"menu-button.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/menu-button!\n *\n * An accessible dropdown menu for the common dropdown menu button design\n * pattern.\n *\n * @see Docs     https://reach.tech/menu-button\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/menu-button\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n *\n * TODO: Fix flash when opening a menu button on a screen with another open menu\n */\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useId } from \"@reach/auto-id\";\nimport Popover, { Position } from \"@reach/popover\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendants,\n  useDescendantsInit,\n  useDescendantKeyDown,\n} from \"@reach/descendants\";\nimport {\n  checkStyles,\n  createNamedContext,\n  forwardRefWithAs,\n  getOwnerDocument,\n  isFunction,\n  isString,\n  makeId,\n  noop,\n  useForkedRef,\n  usePrevious,\n  wrapEvent,\n} from \"@reach/utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n// Actions\n\nconst CLEAR_SELECTION_INDEX = \"CLEAR_SELECTION_INDEX\";\nconst CLICK_MENU_ITEM = \"CLICK_MENU_ITEM\";\nconst CLOSE_MENU = \"CLOSE_MENU\";\nconst OPEN_MENU_AT_FIRST_ITEM = \"OPEN_MENU_AT_FIRST_ITEM\";\nconst OPEN_MENU_AT_INDEX = \"OPEN_MENU_AT_INDEX\";\nconst OPEN_MENU_CLEARED = \"OPEN_MENU_CLEARED\";\nconst SEARCH_FOR_ITEM = \"SEARCH_FOR_ITEM\";\nconst SELECT_ITEM_AT_INDEX = \"SELECT_ITEM_AT_INDEX\";\nconst SET_BUTTON_ID = \"SET_BUTTON_ID\";\n\nconst MenuDescendantContext = createDescendantContext<MenuButtonDescendant>(\n  \"MenuDescendantContext\"\n);\nconst MenuContext = createNamedContext<InternalMenuContextValue>(\n  \"MenuContext\",\n  {} as InternalMenuContextValue\n);\n\nconst initialState: MenuButtonState = {\n  // The button ID is needed for aria controls and can be set directly and\n  // updated for top-level use via context. Otherwise a default is set by useId.\n  // TODO: Consider deprecating direct ID in 1.0 in favor of id at the top level\n  //       for passing deterministic IDs to descendent components.\n  buttonId: null,\n\n  // Whether or not the menu is expanded\n  isExpanded: false,\n\n  // When a user begins typing a character string, the selection will change if\n  // a matching item is found\n  typeaheadQuery: \"\",\n\n  // The index of the current selected item. When the selection is cleared a\n  // value of -1 is used.\n  selectionIndex: -1,\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Menu\n *\n * The wrapper component for the other components. No DOM element is rendered.\n *\n * @see Docs https://reach.tech/menu-button#menu\n */\nexport const Menu: React.FC<MenuProps> = ({ id, children }) => {\n  let buttonRef = useRef(null);\n  let menuRef = useRef(null);\n  let popoverRef = useRef(null);\n  let [descendants, setDescendants] = useDescendantsInit<\n    MenuButtonDescendant\n  >();\n  let [state, dispatch] = useReducer(reducer, initialState);\n  let _id = useId(id);\n  let menuId = id || makeId(\"menu\", _id);\n\n  // We use an event listener attached to the window to capture outside clicks\n  // that close the menu. We don't want the initial button click to trigger this\n  // when a menu is closed, so we can track this behavior in a ref for now.\n  // We shouldn't need this when we rewrite with state machine logic.\n  let buttonClickedRef = useRef(false);\n\n  // We will put children callbacks in a ref to avoid triggering endless render\n  // loops when using render props if the app code doesn't useCallback\n  // https://github.com/reach/reach-ui/issues/523\n  let selectCallbacks = useRef([]);\n\n  // If the popover's position overlaps with an option when the popover\n  // initially opens, the mouseup event will trigger a select. To prevent that,\n  // we decide the menu button is only ready to make a selection if the pointer\n  // moves first, otherwise the user is just registering the initial button\n  // click rather than selecting an item. This is similar to a native select\n  // on most platforms, and our menu button popover works similarly.\n  let readyToSelect = useRef(false);\n\n  let context: InternalMenuContextValue = {\n    buttonRef,\n    dispatch,\n    menuId,\n    menuRef,\n    popoverRef,\n    buttonClickedRef,\n    readyToSelect,\n    selectCallbacks,\n    state,\n  };\n\n  // When the menu is open, focus is placed on the menu itself so that\n  // keyboard navigation is still possible.\n  useEffect(() => {\n    if (state.isExpanded) {\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = true;\n      window.requestAnimationFrame(() => {\n        focus(menuRef.current);\n      });\n    } else {\n      // We want to ignore the immediate focus of a tooltip so it doesn't pop\n      // up again when the menu closes, only pops up when focus returns again\n      // to the tooltip (like native OS tooltips).\n      // @ts-ignore\n      window.__REACH_DISABLE_TOOLTIPS = false;\n    }\n  }, [state.isExpanded]);\n\n  useEffect(() => checkStyles(\"menu-button\"), []);\n\n  return (\n    <DescendantProvider\n      context={MenuDescendantContext}\n      items={descendants}\n      set={setDescendants}\n    >\n      <MenuContext.Provider value={context}>\n        {isFunction(children)\n          ? children({\n              isExpanded: state.isExpanded,\n              // TODO: Remove in 1.0\n              isOpen: state.isExpanded,\n            })\n          : children}\n      </MenuContext.Provider>\n    </DescendantProvider>\n  );\n};\n\n/**\n * @see Docs https://reach.tech/menu-button#menu-props\n */\nexport interface MenuProps {\n  /**\n   * Requires two children: a `<MenuButton>` and a `<MenuList>`.\n   *\n   * @see Docs https://reach.tech/menu-button#menu-children\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: MenuContextValue & {\n          // TODO: Remove in 1.0\n          isOpen: boolean;\n        }\n      ) => React.ReactNode);\n  id?: string;\n}\n\nif (__DEV__) {\n  Menu.displayName = \"Menu\";\n  Menu.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuButton\n *\n * Wraps a DOM `button` that toggles the opening and closing of the dropdown\n * menu. Must be rendered inside of a `<Menu>`.\n *\n * @see Docs https://reach.tech/menu-button#menubutton\n */\nexport const MenuButton = forwardRefWithAs<MenuButtonProps, \"button\">(\n  function MenuButton(\n    { as: Comp = \"button\", onKeyDown, onMouseDown, id, ...props },\n    forwardedRef\n  ) {\n    let {\n      buttonRef,\n      buttonClickedRef,\n      menuId,\n      state: { buttonId, isExpanded },\n      dispatch,\n    } = useContext(MenuContext);\n    let ref = useForkedRef(buttonRef, forwardedRef);\n    let items = useDescendants(MenuDescendantContext);\n    let firstNonDisabledIndex = useMemo(\n      () => items.findIndex((item) => !item.disabled),\n      [items]\n    );\n    useEffect(() => {\n      let newButtonId =\n        id != null\n          ? id\n          : menuId\n          ? makeId(\"menu-button\", menuId)\n          : \"menu-button\";\n      if (buttonId !== newButtonId) {\n        dispatch({\n          type: SET_BUTTON_ID,\n          payload: newButtonId,\n        });\n      }\n    }, [buttonId, dispatch, id, menuId]);\n\n    function handleKeyDown(event: React.KeyboardEvent) {\n      switch (event.key) {\n        case \"ArrowDown\":\n        case \"ArrowUp\":\n          event.preventDefault(); // prevent scroll\n          dispatch({\n            type: OPEN_MENU_AT_INDEX,\n            payload: { index: firstNonDisabledIndex },\n          });\n          break;\n        case \"Enter\":\n        case \" \":\n          dispatch({\n            type: OPEN_MENU_AT_INDEX,\n            payload: { index: firstNonDisabledIndex },\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      if (!isExpanded) {\n        buttonClickedRef.current = true;\n      }\n      if (isRightClick(event.nativeEvent)) {\n        return;\n      } else if (isExpanded) {\n        dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n      } else {\n        dispatch({ type: OPEN_MENU_CLEARED });\n      }\n    }\n\n    return (\n      <Comp\n        // When the menu is displayed, the element with role `button` has\n        // `aria-expanded` set to `true`. When the menu is hidden, it is\n        // recommended that `aria-expanded` is not present.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-expanded={isExpanded ? true : undefined}\n        // The element with role `button` has `aria-haspopup` set to either\n        // `\"menu\"` or `true`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-haspopup\n        // Optionally, the element with role `button` has a value specified for\n        // `aria-controls` that refers to the element with role `menu`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        aria-controls={menuId}\n        {...props}\n        ref={ref}\n        data-reach-menu-button=\"\"\n        id={buttonId || undefined}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        type=\"button\"\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/menu-button#menubutton-props\n */\nexport type MenuButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  /**\n   * Accepts any renderable content.\n   *\n   * @see Docs https://reach.tech/menu-button#menubutton-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  MenuButton.displayName = \"MenuButton\";\n  MenuButton.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItemImpl\n *\n * MenuItem and MenuLink share most of the same functionality captured here.\n */\nconst MenuItemImpl = forwardRefWithAs<MenuItemImplProps, \"div\">(\n  function MenuItemImpl(\n    {\n      as: Comp,\n      index: indexProp,\n      isLink = false,\n      onClick,\n      onDragStart,\n      onMouseDown,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseMove,\n      onMouseUp,\n      onSelect,\n      disabled,\n      valueText: valueTextProp,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let {\n      buttonRef,\n      dispatch,\n      readyToSelect,\n      selectCallbacks,\n      state: { selectionIndex, isExpanded },\n    } = useContext(MenuContext);\n    let ownRef = useRef<HTMLElement | null>(null);\n    // After the ref is mounted to the DOM node, we check to see if we have an\n    // explicit valueText prop before looking for the node's textContent for\n    // typeahead functionality.\n    let [valueText, setValueText] = useState(valueTextProp || \"\");\n    let setValueTextFromDom = useCallback(\n      (node) => {\n        if (node) {\n          ownRef.current = node;\n          if (\n            !valueTextProp ||\n            (node.textContent && valueText !== node.textContent)\n          ) {\n            setValueText(node.textContent);\n          }\n        }\n      },\n      [valueText, valueTextProp]\n    );\n\n    let ref = useForkedRef(forwardedRef, setValueTextFromDom);\n\n    let mouseEventStarted = useRef(false);\n\n    let index = useDescendant(\n      {\n        element: ownRef.current!,\n        key: valueText,\n        disabled,\n        isLink,\n      },\n      MenuDescendantContext,\n      indexProp\n    );\n    let isSelected = index === selectionIndex && !disabled;\n\n    // Update the callback ref array on every render\n    selectCallbacks.current[index] = onSelect;\n\n    function select() {\n      focus(buttonRef.current);\n      onSelect && onSelect();\n      dispatch({ type: CLICK_MENU_ITEM });\n    }\n\n    function handleClick(event: React.MouseEvent) {\n      if (isLink && !isRightClick(event.nativeEvent)) {\n        if (disabled) {\n          event.preventDefault();\n        } else {\n          select();\n        }\n      }\n    }\n\n    function handleDragStart(event: React.MouseEvent) {\n      // Because we don't preventDefault on mousedown for links (we need the\n      // native click event), clicking and holding on a link triggers a\n      // dragstart which we don't want.\n      if (isLink) {\n        event.preventDefault();\n      }\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      if (isRightClick(event.nativeEvent)) return;\n\n      if (isLink) {\n        // Signal that the mouse is down so we can react call the right function\n        // if the user is clicking on a link.\n        mouseEventStarted.current = true;\n      } else {\n        event.preventDefault();\n      }\n    }\n\n    function handleMouseEnter(event: React.MouseEvent) {\n      if (!isSelected && index != null && !disabled) {\n        dispatch({ type: SELECT_ITEM_AT_INDEX, payload: { index } });\n      }\n    }\n\n    function handleMouseLeave(event: React.MouseEvent) {\n      // Clear out selection when mouse over a non-menu item child.\n      dispatch({ type: CLEAR_SELECTION_INDEX });\n    }\n\n    function handleMouseMove() {\n      readyToSelect.current = true;\n      if (!isSelected && index != null && !disabled) {\n        dispatch({ type: SELECT_ITEM_AT_INDEX, payload: { index } });\n      }\n    }\n\n    function handleMouseUp(event: React.MouseEvent) {\n      if (!readyToSelect.current) {\n        readyToSelect.current = true;\n        return;\n      }\n      if (isRightClick(event.nativeEvent)) return;\n\n      if (isLink) {\n        // If a mousedown event was initiated on a menu link followed by a\n        // mouseup event on the same link, we do nothing; a click event will\n        // come next and handle selection. Otherwise, we trigger a click event.\n        if (mouseEventStarted.current) {\n          mouseEventStarted.current = false;\n        } else if (ownRef.current) {\n          ownRef.current.click();\n        }\n      } else {\n        if (!disabled) {\n          select();\n        }\n      }\n    }\n\n    // When the menu closes, reset readyToSelect for the next interaction.\n    useEffect(() => {\n      if (!isExpanded) {\n        readyToSelect.current = false;\n      }\n    }, [isExpanded, readyToSelect]);\n\n    // Any time a mouseup event occurs anywhere in the document, we reset the\n    // mouseEventStarted ref so we can check it again when needed.\n    useEffect(() => {\n      let ownerDocument = getOwnerDocument(ownRef.current) || document;\n      let listener = () => (mouseEventStarted.current = false);\n      ownerDocument.addEventListener(\"mouseup\", listener);\n      return () => ownerDocument.removeEventListener(\"mouseup\", listener);\n    }, []);\n\n    return (\n      <Comp\n        role=\"menuitem\"\n        id={useMenuItemId(index)}\n        tabIndex={-1}\n        {...props}\n        ref={ref}\n        aria-disabled={disabled || undefined}\n        data-reach-menu-item=\"\"\n        data-selected={isSelected ? \"\" : undefined}\n        data-valuetext={valueText}\n        onClick={wrapEvent(onClick, handleClick)}\n        onDragStart={wrapEvent(onDragStart, handleDragStart)}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        onMouseEnter={wrapEvent(onMouseEnter, handleMouseEnter)}\n        onMouseLeave={wrapEvent(onMouseLeave, handleMouseLeave)}\n        onMouseMove={wrapEvent(onMouseMove, handleMouseMove)}\n        onMouseUp={wrapEvent(onMouseUp, handleMouseUp)}\n      />\n    );\n  }\n);\n\nexport type MenuItemImplProps = {\n  /**\n   * You can put any type of content inside of a `<MenuItem>`.\n   *\n   * @see Docs https://reach.tech/menu-button#menuitem-children\n   */\n  children: React.ReactNode;\n  /**\n   * Callback that fires when a `MenuItem` is selected.\n   *\n   * @see Docs https://reach.tech/menu-button#menuitem-onselect\n   */\n  onSelect(): void;\n  index?: number;\n  isLink?: boolean;\n  valueText?: string;\n  /**\n   * Whether or not the item is disabled from selection and navigation.\n   *\n   * @see Docs https://reach.tech/menu-button#menuitem-disabled\n   */\n  disabled?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItem\n *\n * Handles menu selection. Must be a direct child of a `<MenuList>`.\n *\n * @see Docs https://reach.tech/menu-button#menuitem\n */\nexport const MenuItem = forwardRefWithAs<MenuItemProps, \"div\">(\n  function MenuItem({ as = \"div\", ...props }, forwardedRef) {\n    return <MenuItemImpl {...props} ref={forwardedRef} as={as} />;\n  }\n);\n\n/**\n * @see Docs https://reach.tech/menu-button#menuitem-props\n */\nexport type MenuItemProps = Omit<MenuItemImplProps, \"isLink\">;\n\nif (__DEV__) {\n  MenuItem.displayName = \"MenuItem\";\n  MenuItem.propTypes = {\n    as: PropTypes.any,\n    onSelect: PropTypes.func.isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuItems\n *\n * A low-level wrapper for menu items. Compose it with `MenuPopover` for more\n * control over the nested components and their rendered DOM nodes, or if you\n * need to nest arbitrary components between the outer wrapper and your list.\n *\n * @see Docs https://reach.tech/menu-button#menuitems\n */\nexport const MenuItems = forwardRefWithAs<MenuItemsProps, \"div\">(\n  function MenuItems(\n    { as: Comp = \"div\", children, id, onKeyDown, ...props },\n    forwardedRef\n  ) {\n    const {\n      menuId,\n      dispatch,\n      buttonRef,\n      menuRef,\n      selectCallbacks,\n      state: { isExpanded, buttonId, selectionIndex, typeaheadQuery },\n    } = useContext(MenuContext);\n    const menuItems = useDescendants(MenuDescendantContext);\n    const ref = useForkedRef(menuRef, forwardedRef);\n\n    useEffect(() => {\n      // Respond to user char key input with typeahead\n      const match = findItemFromTypeahead(menuItems, typeaheadQuery);\n      if (typeaheadQuery && match != null) {\n        dispatch({\n          type: SELECT_ITEM_AT_INDEX,\n          payload: { index: match },\n        });\n      }\n      let timeout = window.setTimeout(\n        () =>\n          typeaheadQuery && dispatch({ type: SEARCH_FOR_ITEM, payload: \"\" }),\n        1000\n      );\n      return () => window.clearTimeout(timeout);\n    }, [dispatch, menuItems, typeaheadQuery]);\n\n    const prevMenuItemsLength = usePrevious(menuItems.length);\n    const prevSelected = usePrevious(menuItems[selectionIndex]);\n    const prevSelectionIndex = usePrevious(selectionIndex);\n\n    useEffect(() => {\n      if (selectionIndex > menuItems.length - 1) {\n        // If for some reason our selection index is larger than our possible\n        // index range (let's say the last item is selected and the list\n        // dynamically updates), we need to select the last item in the list.\n        dispatch({\n          type: SELECT_ITEM_AT_INDEX,\n          payload: { index: menuItems.length - 1 },\n        });\n      } else if (\n        // Checks if\n        //  - menu length has changed\n        //  - selection index has not changed BUT selected item has changed\n        //\n        // This prevents any dynamic adding/removing of menu items from actually\n        // changing a user's expected selection.\n        prevMenuItemsLength !== menuItems.length &&\n        selectionIndex > -1 &&\n        prevSelected &&\n        prevSelectionIndex === selectionIndex &&\n        menuItems[selectionIndex] !== prevSelected\n      ) {\n        dispatch({\n          type: SELECT_ITEM_AT_INDEX,\n          payload: {\n            index: menuItems.findIndex((i) => i.key === prevSelected.key),\n          },\n        });\n      }\n    }, [\n      dispatch,\n      menuItems,\n      prevMenuItemsLength,\n      prevSelected,\n      prevSelectionIndex,\n      selectionIndex,\n    ]);\n\n    let handleKeyDown = wrapEvent(\n      function handleKeyDown(event: React.KeyboardEvent) {\n        let { key } = event;\n\n        if (!isExpanded) {\n          return;\n        }\n\n        switch (key) {\n          case \"Enter\":\n          case \" \":\n            let selected = menuItems.find(\n              (item) => item.index === selectionIndex\n            );\n            // For links, the Enter key will trigger a click by default, but for\n            // consistent behavior across menu items we'll trigger a click when\n            // the spacebar is pressed.\n            if (selected) {\n              if (selected.isLink && selected.element) {\n                selected.element.click();\n              } else {\n                event.preventDefault();\n                // Focus the button first by default when an item is selected.\n                // We fire the onSelect callback next so the app can manage\n                // focus if needed.\n                focus(buttonRef.current);\n                selectCallbacks.current[selected.index] &&\n                  selectCallbacks.current[selected.index]();\n                dispatch({ type: CLICK_MENU_ITEM });\n              }\n            }\n            break;\n          case \"Escape\":\n            focus(buttonRef.current);\n            dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n            break;\n          case \"Tab\":\n            // prevent leaving\n            event.preventDefault();\n            break;\n          default:\n            // Check if a user is typing some char keys and respond by setting\n            // the query state.\n            if (isString(key) && key.length === 1) {\n              const query = typeaheadQuery + key.toLowerCase();\n              dispatch({\n                type: SEARCH_FOR_ITEM,\n                payload: query,\n              });\n            }\n            break;\n        }\n      },\n      useDescendantKeyDown(MenuDescendantContext, {\n        currentIndex: selectionIndex,\n        orientation: \"vertical\",\n        rotate: false,\n        filter: (item) => !item.disabled,\n        callback: (index: number) => {\n          dispatch({\n            type: SELECT_ITEM_AT_INDEX,\n            payload: { index },\n          });\n        },\n        key: \"index\",\n      })\n    );\n\n    return (\n      // TODO: Should probably file a but in jsx-a11y, but this is correct\n      // according to https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n      // eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex\n      <Comp\n        // Refers to the descendant menuitem element that is visually indicated\n        // as focused.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n        aria-activedescendant={useMenuItemId(selectionIndex) || undefined}\n        // Refers to the element that contains the accessible name for the\n        // `menu`. The menu is labeled by the menu button.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html\n        aria-labelledby={buttonId || undefined}\n        // The element that contains the menu items displayed by activating the\n        // button has role menu.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\n        role=\"menu\"\n        tabIndex={-1}\n        {...props}\n        ref={ref}\n        data-reach-menu-items=\"\"\n        id={menuId}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/menu-button#menuitems-props\n */\nexport type MenuItemsProps = {\n  /**\n   * Can contain only `MenuItem` or a `MenuLink`.\n   *\n   * @see Docs https://reach.tech/menu-button#menuitems-children\n   */\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  MenuItems.displayName = \"MenuItems\";\n  MenuItems.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuLink\n *\n * Handles linking to a different page in the menu. By default it renders `<a>`,\n * but also accepts any other kind of Link as long as the `Link` uses the\n * `React.forwardRef` API.\n *\n * Must be a direct child of a `<MenuList>`.\n *\n * @see Docs https://reach.tech/menu-button#menulink\n */\nexport const MenuLink = forwardRefWithAs<\n  MenuLinkProps & { component?: any },\n  \"a\"\n>(function MenuLink({ as = \"a\", component, onSelect, ...props }, forwardedRef) {\n  if (component) {\n    console.warn(\n      \"[@reach/menu-button]: Please use the `as` prop instead of `component`.\"\n    );\n  }\n\n  return (\n    <div role=\"none\" tabIndex={-1}>\n      <MenuItemImpl\n        {...props}\n        ref={forwardedRef}\n        data-reach-menu-link=\"\"\n        as={as}\n        isLink={true}\n        onSelect={onSelect || noop}\n      />\n    </div>\n  );\n});\n\n/**\n * @see Docs https://reach.tech/menu-button#menulink-props\n */\nexport type MenuLinkProps = Omit<MenuItemImplProps, \"isLink\" | \"onSelect\"> & {\n  onSelect?(): void;\n};\n\nif (__DEV__) {\n  MenuLink.displayName = \"MenuLink\";\n  MenuLink.propTypes = {\n    as: PropTypes.any,\n    component: PropTypes.any,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuList\n *\n * Wraps a DOM element that renders the menu items. Must be rendered inside of\n * a `<Menu>`.\n *\n * @see Docs https://reach.tech/menu-button#menulist\n */\nexport const MenuList = forwardRef<HTMLDivElement, MenuListProps>(\n  function MenuList({ portal = true, ...props }, forwardedRef) {\n    return (\n      <MenuPopover portal={portal}>\n        <MenuItems {...props} ref={forwardedRef} data-reach-menu-list=\"\" />\n      </MenuPopover>\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/menu-button#menulist-props\n */\nexport type MenuListProps = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`.\n   *\n   * @see Docs https://reach.tech/menu-button#menulist-portal\n   */\n  portal?: boolean;\n  /**\n   * Can contain only `MenuItem` or a `MenuLink`.\n   *\n   * @see Docs https://reach.tech/menu-button#menulist-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  MenuList.displayName = \"MenuList\";\n  MenuList.propTypes = {\n    children: PropTypes.node.isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * MenuPopover\n *\n * A low-level wrapper for the popover that appears when a menu button is open.\n * You can compose it with `MenuItems` for more control over the nested\n * components and their rendered DOM nodes, or if you need to nest arbitrary\n * components between the outer wrapper and your list.\n *\n * @see Docs https://reach.tech/menu-button#menupopover\n */\nexport const MenuPopover = forwardRef<any, MenuPopoverProps>(\n  function MenuPopover(\n    { children, portal = true, position, ...props },\n    forwardedRef\n  ) {\n    const {\n      buttonRef,\n      buttonClickedRef,\n      dispatch,\n      menuRef,\n      popoverRef,\n      state: { isExpanded },\n    } = useContext(MenuContext);\n\n    const ref = useForkedRef(popoverRef, forwardedRef);\n\n    useEffect(() => {\n      function listener(event: MouseEvent) {\n        if (buttonClickedRef.current) {\n          buttonClickedRef.current = false;\n        } else {\n          // We on want to close only if focus rests outside the menu\n          if (isExpanded && popoverRef.current) {\n            if (!popoverRef.current.contains(event.target as Element)) {\n              dispatch({ type: CLOSE_MENU, payload: { buttonRef } });\n            }\n          }\n        }\n      }\n      window.addEventListener(\"mousedown\", listener);\n      return () => {\n        window.removeEventListener(\"mousedown\", listener);\n      };\n    }, [\n      buttonClickedRef,\n      buttonRef,\n      dispatch,\n      isExpanded,\n      menuRef,\n      popoverRef,\n    ]);\n\n    let commonProps = {\n      ref,\n      // TODO: remove in 1.0\n      \"data-reach-menu\": \"\",\n      \"data-reach-menu-popover\": \"\",\n      hidden: !isExpanded,\n      children,\n      ...props,\n    };\n\n    return portal ? (\n      <Popover\n        {...commonProps}\n        targetRef={buttonRef as any}\n        position={position}\n      />\n    ) : (\n      <div {...commonProps} />\n    );\n  }\n);\n\n/**\n * @see Docs https://reach.tech/menu-button#menupopover-props\n */\nexport type MenuPopoverProps = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Must contain a `MenuItems`\n   *\n   * @see Docs https://reach.tech/menu-button#menupopover-children\n   */\n  children: React.ReactNode;\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`.\n   *\n   * @see Docs https://reach.tech/menu-button#menupopover-portal\n   */\n  portal?: boolean;\n  /**\n   * A function used to determine the position of the popover in relation to the\n   * menu button. By default, the menu button will attempt to position the\n   * popover below the button aligned with its left edge. If this positioning\n   * results in collisions with any side of the window, the popover will be\n   * anchored to a different side to avoid those collisions if possible.\n   *\n   * @see Docs https://reach.tech/menu-button#menupopover-position\n   */\n  position?: Position;\n};\n\nif (__DEV__) {\n  MenuPopover.displayName = \"MenuPopover\";\n  MenuPopover.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Menu` component to its descendants.\n *\n * @see Docs https://reach.tech/menu-button#usemenubuttoncontext\n */\nexport function useMenuButtonContext(): MenuContextValue {\n  let {\n    state: { isExpanded },\n  } = useContext(MenuContext);\n  return useMemo(() => ({ isExpanded }), [isExpanded]);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * When a user's typed input matches the string displayed in a menu item, it is\n * expected that the matching menu item is selected. This is our matching\n * function.\n */\nfunction findItemFromTypeahead(\n  items: MenuButtonDescendant[],\n  string: string = \"\"\n) {\n  if (!string) {\n    return null;\n  }\n\n  const found = items.find((item) => {\n    return item.disabled\n      ? false\n      : item.element?.dataset?.valuetext?.toLowerCase().startsWith(string);\n  });\n  return found ? items.indexOf(found) : null;\n}\n\nfunction useMenuItemId(index: number | null) {\n  let { menuId } = useContext(MenuContext);\n  return index != null && index > -1\n    ? makeId(`option-${index}`, menuId)\n    : undefined;\n}\n\ninterface MenuButtonState {\n  isExpanded: boolean;\n  selectionIndex: number;\n  buttonId: null | string;\n  typeaheadQuery: string;\n}\n\ntype MenuButtonAction =\n  | { type: \"CLICK_MENU_ITEM\" }\n  | { type: \"CLOSE_MENU\"; payload: { buttonRef: ButtonRef } }\n  | { type: \"OPEN_MENU_AT_FIRST_ITEM\" }\n  | { type: \"OPEN_MENU_AT_INDEX\"; payload: { index: number } }\n  | { type: \"OPEN_MENU_CLEARED\" }\n  | {\n      type: \"SELECT_ITEM_AT_INDEX\";\n      payload: { max?: number; min?: number; index: number };\n    }\n  | { type: \"CLEAR_SELECTION_INDEX\" }\n  | { type: \"SET_BUTTON_ID\"; payload: string }\n  | { type: \"SEARCH_FOR_ITEM\"; payload: string };\n\nfunction isRightClick(nativeEvent: MouseEvent) {\n  return nativeEvent.which === 3 || nativeEvent.button === 2;\n}\n\nfunction focus<T extends HTMLElement = HTMLElement>(\n  element: T | undefined | null\n) {\n  element && element.focus();\n}\n\nfunction reducer(\n  state: MenuButtonState,\n  action: MenuButtonAction = {} as MenuButtonAction\n): MenuButtonState {\n  switch (action.type) {\n    case CLICK_MENU_ITEM:\n      return {\n        ...state,\n        isExpanded: false,\n        selectionIndex: -1,\n      };\n    case CLOSE_MENU:\n      return {\n        ...state,\n        isExpanded: false,\n        selectionIndex: -1,\n      };\n    case OPEN_MENU_AT_FIRST_ITEM:\n      return {\n        ...state,\n        isExpanded: true,\n        selectionIndex: 0,\n      };\n    case OPEN_MENU_AT_INDEX:\n      return {\n        ...state,\n        isExpanded: true,\n        selectionIndex: action.payload.index,\n      };\n    case OPEN_MENU_CLEARED:\n      return {\n        ...state,\n        isExpanded: true,\n        selectionIndex: -1,\n      };\n    case SELECT_ITEM_AT_INDEX:\n      if (action.payload.index >= 0) {\n        return {\n          ...state,\n          selectionIndex:\n            action.payload.max != null\n              ? Math.min(Math.max(action.payload.index, 0), action.payload.max)\n              : Math.max(action.payload.index, 0),\n        };\n      }\n      return state;\n    case CLEAR_SELECTION_INDEX:\n      return {\n        ...state,\n        selectionIndex: -1,\n      };\n    case SET_BUTTON_ID:\n      return {\n        ...state,\n        buttonId: action.payload,\n      };\n    case SEARCH_FOR_ITEM:\n      if (typeof action.payload !== \"undefined\") {\n        return {\n          ...state,\n          typeaheadQuery: action.payload,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype MenuButtonDescendant = Descendant<HTMLElement> & {\n  key: string;\n  isLink: boolean;\n  disabled?: boolean;\n};\n\ntype ButtonRef = React.RefObject<null | HTMLElement>;\ntype MenuRef = React.RefObject<null | HTMLElement>;\ntype PopoverRef = React.RefObject<null | HTMLElement>;\n\ninterface InternalMenuContextValue {\n  buttonRef: ButtonRef;\n  buttonClickedRef: React.MutableRefObject<boolean>;\n  dispatch: React.Dispatch<MenuButtonAction>;\n  menuId: string | undefined;\n  menuRef: MenuRef;\n  popoverRef: PopoverRef;\n  readyToSelect: React.MutableRefObject<boolean>;\n  selectCallbacks: React.MutableRefObject<(() => void)[]>;\n  state: MenuButtonState;\n}\n\nexport type MenuContextValue = {\n  isExpanded: boolean;\n  // id: string | undefined;\n};\n"],"names":["MenuDescendantContext","createDescendantContext","MenuContext","createNamedContext","initialState","buttonId","isExpanded","typeaheadQuery","selectionIndex","MenuButton","forwardRefWithAs","forwardedRef","as","Comp","onKeyDown","onMouseDown","id","props","useContext","buttonRef","buttonClickedRef","menuId","state","dispatch","ref","useForkedRef","items","useDescendants","firstNonDisabledIndex","useMemo","findIndex","item","disabled","useEffect","newButtonId","makeId","type","payload","React","undefined","wrapEvent","event","key","preventDefault","index","current","isRightClick","nativeEvent","MenuItemImpl","indexProp","isLink","onClick","onDragStart","onMouseEnter","onMouseLeave","onMouseMove","onMouseUp","onSelect","valueTextProp","valueText","readyToSelect","selectCallbacks","ownRef","useRef","useState","setValueText","setValueTextFromDom","useCallback","node","textContent","mouseEventStarted","useDescendant","element","isSelected","select","focus","ownerDocument","getOwnerDocument","document","listener","addEventListener","removeEventListener","role","useMenuItemId","tabIndex","click","MenuItem","MenuItems","children","menuRef","menuItems","match","string","found","find","_item$element","dataset","_item$element$dataset","valuetext","_item$element$dataset2","toLowerCase","startsWith","indexOf","findItemFromTypeahead","timeout","window","setTimeout","clearTimeout","prevMenuItemsLength","usePrevious","length","prevSelected","prevSelectionIndex","i","handleKeyDown","selected","isString","query","useDescendantKeyDown","currentIndex","orientation","rotate","filter","callback","MenuLink","component","console","warn","noop","MenuList","forwardRef","portal","MenuPopover","position","popoverRef","contains","target","commonProps","hidden","Popover","targetRef","which","button","reducer","action","max","Math","min","useDescendantsInit","descendants","setDescendants","useReducer","_id","useId","context","__REACH_DISABLE_TOOLTIPS","requestAnimationFrame","checkStyles","DescendantProvider","set","Provider","value","isFunction","isOpen"],"mappings":"opBAoDA,IAUMA,EAAwBC,0BAC5B,yBAEIC,EAAcC,qBAClB,cACA,IAGIC,EAAgC,CAKpCC,SAAU,KAGVC,YAAY,EAIZC,eAAgB,GAIhBC,gBAAiB,GAkINC,EAAaC,oBACxB,WAEEC,WADEC,GAAIC,aAAO,WAAUC,IAAAA,UAAWC,IAAAA,YAAaC,IAAAA,GAAOC,+CASlDC,aAAWhB,GALbiB,IAAAA,UACAC,IAAAA,iBACAC,IAAAA,WACAC,MAASjB,IAAAA,SAAUC,IAAAA,WACnBiB,IAAAA,SAEEC,EAAMC,eAAaN,EAAWR,GAC9Be,EAAQC,iBAAe3B,GACvB4B,EAAwBC,WAC1B,kBAAMH,EAAMI,WAAU,SAACC,UAAUA,EAAKC,cACtC,CAACN,WAEHO,aAAU,eACJC,EACI,MAANlB,EACIA,EACAK,EACAc,SAAO,cAAed,GACtB,cACFhB,IAAa6B,GACfX,EAAS,CACPa,KAvLY,gBAwLZC,QAASH,MAGZ,CAAC7B,EAAUkB,EAAUP,EAAIK,IAsC1BiB,wBAACzB,mCAKgBP,QAAoBiC,qCAQpBlB,GACXJ,GACJO,IAAKA,2BACkB,GACvBR,GAAIX,QAAYkC,EAChBzB,UAAW0B,YAAU1B,YAtDF2B,UACbA,EAAMC,SACP,gBACA,UACHD,EAAME,iBACNpB,EAAS,CACPa,KAvMe,qBAwMfC,QAAS,CAAEO,MAAOhB,eAGjB,YACA,IACHL,EAAS,CACPa,KA9Me,qBA+MfC,QAAS,CAAEO,MAAOhB,SAyCtBb,YAAayB,YAAUzB,YAjCF0B,GAClBnC,IACHc,EAAiByB,SAAU,GAEzBC,EAAaL,EAAMM,cAGrBxB,EADSjB,EACA,CAAE8B,KAhOA,aAgOkBC,QAAS,CAAElB,UAAAA,IAE/B,CAAEiB,KA/NO,yBAwPlBA,KAAK,eAgCPY,EAAetC,oBACnB,WAiBEC,OAfME,IAAJD,GACOqC,IAAPL,UACAM,OAAAA,gBACAC,IAAAA,QACAC,IAAAA,YACArC,IAAAA,YACAsC,IAAAA,aACAC,IAAAA,aACAC,IAAAA,YACAC,IAAAA,UACAC,IAAAA,SACAzB,IAAAA,SACW0B,IAAXC,UACG1C,iKAUDC,aAAWhB,GALbiB,IAAAA,UACAI,IAAAA,SACAqC,IAAAA,cACAC,IAAAA,oBACAvC,MAASd,IAAAA,eAAgBF,IAAAA,WAEvBwD,EAASC,SAA2B,QAIRC,WAASN,GAAiB,IAArDC,OAAWM,OACZC,EAAsBC,eACxB,SAACC,GACKA,IACFN,EAAOjB,QAAUuB,IAEdV,GACAU,EAAKC,aAAeV,IAAcS,EAAKC,cAExCJ,EAAaG,EAAKC,gBAIxB,CAACV,EAAWD,IAGVlC,EAAMC,eAAad,EAAcuD,GAEjCI,EAAoBP,UAAO,GAE3BnB,EAAQ2B,gBACV,CACEC,QAASV,EAAOjB,QAChBH,IAAKiB,EACL3B,SAAAA,EACAkB,OAAAA,GAEFlD,EACAiD,GAEEwB,EAAa7B,IAAUpC,IAAmBwB,WAKrC0C,IACPC,EAAMxD,EAAU0B,SAChBY,GAAYA,IACZlC,EAAS,CAAEa,KAjWO,2BA4VpByB,EAAgBhB,QAAQD,GAASa,EAiFjCxB,aAAU,WACH3B,IACHsD,EAAcf,SAAU,KAEzB,CAACvC,EAAYsD,IAIhB3B,aAAU,eACJ2C,EAAgBC,mBAAiBf,EAAOjB,UAAYiC,SACpDC,EAAW,kBAAOT,EAAkBzB,SAAU,UAClD+B,EAAcI,iBAAiB,UAAWD,GACnC,kBAAMH,EAAcK,oBAAoB,UAAWF,MACzD,IAGDzC,wBAACzB,iBACCqE,KAAK,WACLlE,GAAImE,EAAcvC,GAClBwC,UAAW,GACPnE,GACJO,IAAKA,kBACUQ,QAAYO,yBACN,mBACNkC,EAAa,QAAKlC,mBACjBoB,EAChBR,QAASX,YAAUW,YAnGFV,GACfS,IAAWJ,EAAaL,EAAMM,eAC5Bf,EACFS,EAAME,iBAEN+B,QA+FFtB,YAAaZ,YAAUY,YA1FFX,GAInBS,GACFT,EAAME,oBAsFN5B,YAAayB,YAAUzB,YAlFF0B,GACnBK,EAAaL,EAAMM,eAEnBG,EAGFoB,EAAkBzB,SAAU,EAE5BJ,EAAME,qBA2ENU,aAAcb,YAAUa,YAvEFZ,GACnBgC,GAAuB,MAAT7B,GAAkBZ,GACnCT,EAAS,CAAEa,KA/XU,uBA+XkBC,QAAS,CAAEO,MAAAA,QAsElDU,aAAcd,YAAUc,YAlEFb,GAExBlB,EAAS,CAAEa,KA5Ya,6BA6ctBmB,YAAaf,YAAUe,cA7DzBK,EAAcf,SAAU,EACnB4B,GAAuB,MAAT7B,GAAkBZ,GACnCT,EAAS,CAAEa,KA3YU,uBA2YkBC,QAAS,CAAEO,MAAAA,QA4DlDY,UAAWhB,YAAUgB,YAxDFf,GAChBmB,EAAcf,QAIfC,EAAaL,EAAMM,eAEnBG,EAIEoB,EAAkBzB,QACpByB,EAAkBzB,SAAU,EACnBiB,EAAOjB,SAChBiB,EAAOjB,QAAQwC,QAGZrD,GACH0C,KAhBFd,EAAcf,SAAU,WA6FnByC,EAAW5E,oBACtB,WAA4CC,WAAxBC,GAAAA,aAAK,QAAUK,qBAC1BqB,wBAACU,mBAAiB/B,GAAOO,IAAKb,EAAcC,GAAIA,QA4B9C2E,EAAY7E,oBACvB,WAEEC,WADEC,GAAIC,aAAO,QAAO2E,IAAAA,SAAc1E,IAAAA,UAAcG,4CAU5CC,aAAWhB,GANbmB,IAAAA,OACAE,IAAAA,SACAJ,IAAAA,UACAsE,IAAAA,QACA5B,IAAAA,oBACAvC,MAAShB,IAAAA,WAAYD,IAAAA,SAAUG,IAAAA,eAAgBD,IAAAA,eAE3CmF,EAAY/D,iBAAe3B,GAC3BwB,EAAMC,eAAagE,EAAS9E,GAElCsB,aAAU,eAEF0D,EAqZZ,SACEjE,EACAkE,eAAAA,IAAAA,EAAiB,KAEZA,SACI,SAGHC,EAAQnE,EAAMoE,MAAK,SAAC/D,oBACjBA,EAAKC,qBAERD,EAAKyC,gCAALuB,EAAcC,gCAAdC,EAAuBC,8BAAvBC,EAAkCC,cAAcC,WAAWT,cAE1DC,EAAQnE,EAAM4E,QAAQT,GAAS,KAlapBU,CAAsBb,EAAWnF,GAC3CA,GAA2B,MAAToF,GACpBpE,EAAS,CACPa,KAjiBmB,uBAkiBnBC,QAAS,CAAEO,MAAO+C,SAGlBa,EAAUC,OAAOC,YACnB,kBACEnG,GAAkBgB,EAAS,CAAEa,KAxiBf,kBAwiBsCC,QAAS,OAC/D,YAEK,kBAAMoE,OAAOE,aAAaH,MAChC,CAACjF,EAAUmE,EAAWnF,QAEnBqG,EAAsBC,cAAYnB,EAAUoB,QAC5CC,EAAeF,cAAYnB,EAAUlF,IACrCwG,EAAqBH,cAAYrG,GAEvCyB,aAAU,WACJzB,EAAiBkF,EAAUoB,OAAS,EAItCvF,EAAS,CACPa,KAvjBmB,uBAwjBnBC,QAAS,CAAEO,MAAO8C,EAAUoB,OAAS,KASvCF,IAAwBlB,EAAUoB,QAClCtG,GAAkB,GAClBuG,GACAC,IAAuBxG,GACvBkF,EAAUlF,KAAoBuG,GAE9BxF,EAAS,CACPa,KAxkBmB,uBAykBnBC,QAAS,CACPO,MAAO8C,EAAU5D,WAAU,SAACmF,UAAMA,EAAEvE,MAAQqE,EAAarE,YAI9D,CACDnB,EACAmE,EACAkB,EACAG,EACAC,EACAxG,QAGE0G,EAAgB1E,aAClB,SAAuBC,OACfC,EAAQD,EAARC,OAEDpC,SAIGoC,OACD,YACA,QACCyE,EAAWzB,EAAUI,MACvB,SAAC/D,UAASA,EAAKa,QAAUpC,KAKvB2G,IACEA,EAASjE,QAAUiE,EAAS3C,QAC9B2C,EAAS3C,QAAQa,SAEjB5C,EAAME,iBAINgC,EAAMxD,EAAU0B,SAChBgB,EAAgBhB,QAAQsE,EAASvE,QAC/BiB,EAAgBhB,QAAQsE,EAASvE,SACnCrB,EAAS,CAAEa,KAznBH,gCA6nBT,SACHuC,EAAMxD,EAAU0B,SAChBtB,EAAS,CAAEa,KA9nBJ,aA8nBsBC,QAAS,CAAElB,UAAAA,eAErC,MAEHsB,EAAME,kCAKFyE,WAAS1E,IAAuB,IAAfA,EAAIoE,OAAc,KAC/BO,EAAQ9G,EAAiBmC,EAAI0D,cACnC7E,EAAS,CACPa,KAtoBQ,kBAuoBRC,QAASgF,QAMnBC,uBAAqBtH,EAAuB,CAC1CuH,aAAc/G,EACdgH,YAAa,WACbC,QAAQ,EACRC,OAAQ,SAAC3F,UAAUA,EAAKC,UACxB2F,SAAU,SAAC/E,GACTrB,EAAS,CACPa,KAnpBiB,uBAopBjBC,QAAS,CAAEO,MAAAA,MAGfF,IAAK,kBAQPJ,wBAACzB,yCAIwBsE,EAAc3E,SAAmB+B,oBAIvClC,QAAYkC,EAI7B2C,KAAK,OACLE,UAAW,GACPnE,GACJO,IAAKA,0BACiB,GACtBR,GAAIK,EACJP,UAAW0B,YAAU1B,EAAWoG,KAE/B1B,MAsCIoC,EAAWlH,oBAGtB,WAA+DC,WAA3CC,GAAAA,aAAK,MAAKiH,IAAAA,UAAWpE,IAAAA,SAAaxC,4CAClD4G,GACFC,QAAQC,KACN,0EAKFzF,+BAAK4C,KAAK,OAAOE,UAAW,GAC1B9C,wBAACU,mBACK/B,GACJO,IAAKb,yBACgB,GACrBC,GAAIA,EACJsC,QAAQ,EACRO,SAAUA,GAAYuE,cA+BjBC,EAAWC,cACtB,WAA+CvH,WAA3BwH,OAAAA,gBAAkBlH,yBAElCqB,wBAAC8F,GAAYD,OAAQA,GACnB7F,wBAACiD,mBAActE,GAAOO,IAAKb,yBAAmC,UA4CzDyH,EAAcF,cACzB,WAEEvH,OADE6E,IAAAA,aAAU2C,OAAAA,gBAAeE,IAAAA,SAAapH,0CAUpCC,aAAWhB,GANbiB,IAAAA,UACAC,IAAAA,iBACAG,IAAAA,SACAkE,IAAAA,QACA6C,IAAAA,WACShI,IAATgB,MAAShB,WAGLkB,EAAMC,eAAa6G,EAAY3H,GAErCsB,aAAU,oBACC8C,EAAStC,GACZrB,EAAiByB,QACnBzB,EAAiByB,SAAU,EAGvBvC,GAAcgI,EAAWzF,UACtByF,EAAWzF,QAAQ0F,SAAS9F,EAAM+F,SACrCjH,EAAS,CAAEa,KAv1BN,aAu1BwBC,QAAS,CAAElB,UAAAA,aAKhDsF,OAAOzB,iBAAiB,YAAaD,GAC9B,WACL0B,OAAOxB,oBAAoB,YAAaF,MAEzC,CACD3D,EACAD,EACAI,EACAjB,EACAmF,EACA6C,QAGEG,KACFjH,IAAAA,oBAEmB,6BACQ,GAC3BkH,QAASpI,EACTkF,SAAAA,GACGvE,UAGEkH,EACL7F,wBAACqG,2BACKF,GACJG,UAAWzH,EACXkH,SAAUA,KAGZ/F,+CAASmG,OA8Ef,SAAStD,EAAcvC,SACJ1B,aAAWhB,UACZ,MAAT0C,GAAiBA,GAAS,EAC7BT,mBAAiBS,IAFfvB,aAGFkB,EAwBN,SAASO,EAAaC,UACS,IAAtBA,EAAY8F,OAAsC,IAAvB9F,EAAY+F,OAGhD,SAASnE,EACPH,GAEAA,GAAWA,EAAQG,QAGrB,SAASoE,EACPzH,EACA0H,mBAAAA,IAAAA,EAA2B,IAEnBA,EAAO5G,UAn/BO,sBACL,yBA2/BRd,GACHhB,YAAY,EACZE,gBAAiB,QA5/BO,sCAggCrBc,GACHhB,YAAY,EACZE,eAAgB,QAjgCG,iCAqgChBc,GACHhB,YAAY,EACZE,eAAgBwI,EAAO3G,QAAQO,YAtgCb,gCA0gCftB,GACHhB,YAAY,EACZE,gBAAiB,QA1gCI,8BA6gCnBwI,EAAO3G,QAAQO,OAAS,OAErBtB,GACHd,eACwB,MAAtBwI,EAAO3G,QAAQ4G,IACXC,KAAKC,IAAID,KAAKD,IAAID,EAAO3G,QAAQO,MAAO,GAAIoG,EAAO3G,QAAQ4G,KAC3DC,KAAKD,IAAID,EAAO3G,QAAQO,MAAO,KAGlCtB,MA7hCiB,oCAgiCnBA,GACHd,gBAAiB,QAzhCH,4BA6hCXc,GACHjB,SAAU2I,EAAO3G,cAhiCD,8BAmiCY,IAAnB2G,EAAO3G,aAEXf,GACHf,eAAgByI,EAAO3G,UAGpBf,iBAEAA,gBAngC4B,gBAAGN,IAAAA,GAAIwE,IAAAA,SAC1CrE,EAAY4C,SAAO,MACnB0B,EAAU1B,SAAO,MACjBuE,EAAavE,SAAO,QACYqF,uBAA/BC,OAAaC,SAGMC,aAAWR,EAAS3I,GAAvCkB,OAAOC,OACRiI,EAAMC,QAAMzI,GACZK,EAASL,GAAMmB,SAAO,OAAQqH,GAM9BpI,EAAmB2C,UAAO,GAK1BF,EAAkBE,SAAO,IAQzBH,EAAgBG,UAAO,GAEvB2F,EAAoC,CACtCvI,UAAAA,EACAI,SAAAA,EACAF,OAAAA,EACAoE,QAAAA,EACA6C,WAAAA,EACAlH,iBAAAA,EACAwC,cAAAA,EACAC,gBAAAA,EACAvC,MAAAA,UAKFW,aAAU,WACJX,EAAMhB,YAERmG,OAAOkD,0BAA2B,EAClClD,OAAOmD,uBAAsB,WAC3BjF,EAAMc,EAAQ5C,aAOhB4D,OAAOkD,0BAA2B,IAEnC,CAACrI,EAAMhB,aAEV2B,aAAU,kBAAM4H,cAAY,iBAAgB,IAG1CvH,wBAACwH,sBACCJ,QAAS1J,EACT0B,MAAO2H,EACPU,IAAKT,GAELhH,wBAACpC,EAAY8J,UAASC,MAAOP,GAC1BQ,aAAW1E,GACRA,EAAS,CACPlF,WAAYgB,EAAMhB,WAElB6J,OAAQ7I,EAAMhB,aAEhBkF,yKAqzBClF,EACPY,aAAWhB,GADboB,MAAShB,kBAEJuB,WAAQ,iBAAO,CAAEvB,WAAAA,KAAe,CAACA"}